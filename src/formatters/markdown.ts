import { Repository, Contributor, Language } from "../types.ts";
import {
  formatNumber,
  formatDate,
  formatDuration,
  calculateDaysAgo,
} from "../utils/format.ts";

export function generateMarkdownReport(
  repo: Repository,
  contributors?: Contributor[],
  languages?: Language,
  activity?: { commits: number; issues: number; pullRequests: number },
): string {
  const lines: string[] = [];

  lines.push(`# 📊 Repository Statistics: ${repo.nameWithOwner}`);
  lines.push("");
  lines.push(`> Generated on ${new Date().toISOString()}`);
  lines.push("");

  lines.push("## 📋 Repository Overview");
  lines.push("");
  lines.push("| Property | Value |");
  lines.push("|----------|-------|");
  lines.push(`| **Name** | ${repo.nameWithOwner} |`);
  if (repo.description) {
    lines.push(`| **Description** | ${repo.description} |`);
  }
  lines.push(`| **Created** | ${formatDate(repo.createdAt)} |`);
  lines.push(
    `| **Last Updated** | ${formatDate(repo.updatedAt)} (${formatDuration(calculateDaysAgo(repo.updatedAt))}) |`,
  );
  lines.push(
    `| **Last Push** | ${formatDate(repo.pushedAt)} (${formatDuration(calculateDaysAgo(repo.pushedAt))}) |`,
  );
  if (repo.primaryLanguage) {
    lines.push(`| **Primary Language** | ${repo.primaryLanguage.name} |`);
  }
  if (repo.licenseInfo) {
    lines.push(`| **License** | ${repo.licenseInfo.name} |`);
  }

  const badges = [];
  if (repo.isPrivate) badges.push("🔒 Private");
  if (repo.isArchived) badges.push("📦 Archived");
  if (repo.isFork) badges.push("🍴 Fork");
  if (badges.length > 0) {
    lines.push(`| **Status** | ${badges.join(", ")} |`);
  }
  lines.push("");

  lines.push("## 📈 Key Metrics");
  lines.push("");
  lines.push("| Metric | Count |");
  lines.push("|--------|-------|");
  lines.push(`| ⭐ **Stars** | ${formatNumber(repo.stargazerCount)} |`);
  lines.push(`| 🍴 **Forks** | ${formatNumber(repo.forkCount)} |`);
  lines.push(`| 👁️ **Watchers** | ${formatNumber(repo.watchers.totalCount)} |`);
  lines.push(`| 🐛 **Issues** | ${formatNumber(repo.issues.totalCount)} |`);
  lines.push(
    `| 🔀 **Pull Requests** | ${formatNumber(repo.pullRequests.totalCount)} |`,
  );
  lines.push(`| 📦 **Releases** | ${formatNumber(repo.releases.totalCount)} |`);
  lines.push(
    `| 💾 **Commits** | ${formatNumber(repo.defaultBranchRef?.target?.history?.totalCount || 0)} |`,
  );
  lines.push("");

  if (contributors && contributors.length > 0) {
    lines.push("## 👥 Top Contributors");
    lines.push("");
    lines.push("| # | Username | Contributions | Percentage |");
    lines.push("|---|----------|---------------|------------|");

    const maxContributions = contributors[0].contributions;
    contributors.slice(0, 10).forEach((c, i) => {
      const percentage = ((c.contributions / maxContributions) * 100).toFixed(
        1,
      );
      lines.push(
        `| ${i + 1} | [@${c.login}](https://github.com/${c.login}) | ${formatNumber(c.contributions)} | ${percentage}% |`,
      );
    });
    lines.push("");
  }

  if (languages && Object.keys(languages).length > 0) {
    lines.push("## 💻 Language Distribution");
    lines.push("");
    lines.push("| Language | Bytes | Percentage |");
    lines.push("|----------|-------|------------|");

    const total = Object.values(languages).reduce((sum, val) => sum + val, 0);
    Object.entries(languages)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .forEach(([lang, bytes]) => {
        const percentage = ((bytes / total) * 100).toFixed(1);
        lines.push(`| ${lang} | ${formatNumber(bytes)} | ${percentage}% |`);
      });
    lines.push("");
  }

  if (activity) {
    lines.push("## 📊 Recent Activity (Last 7 Days)");
    lines.push("");
    lines.push("| Type | Count |");
    lines.push("|------|-------|");
    lines.push(`| Commits | ${activity.commits} |`);
    lines.push(`| Issues | ${activity.issues} |`);
    lines.push(`| Pull Requests | ${activity.pullRequests} |`);
    lines.push("");
  }

  lines.push("---");
  lines.push("");
  lines.push("*Generated by [gh-stats](https://github.com/cli/cli)*");

  return lines.join("\n");
}
